{"dependencies":[{"name":"/Users/mac/Documents/Hacktiv8/Phase3/week_1/data-viz/node_modules/d3-polygon/package.json","includedInParent":true,"mtime":1531110489993}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n};","map":{"mappings":[{"generated":{"line":7,"column":18},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":15}},{"name":"a","generated":{"line":7,"column":28},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":24}},{"generated":{"line":7,"column":29},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":15}},{"name":"b","generated":{"line":7,"column":31},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":27}},{"generated":{"line":7,"column":32},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":15}},{"name":"c","generated":{"line":7,"column":34},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":30}},{"generated":{"line":7,"column":35},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":15}},{"generated":{"line":7,"column":37},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":5,"column":33}},{"generated":{"line":8,"column":0},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":2}},{"generated":{"line":8,"column":9},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":9}},{"name":"b","generated":{"line":8,"column":10},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":10}},{"generated":{"line":8,"column":12},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":12}},{"generated":{"line":8,"column":13},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":10}},{"name":"a","generated":{"line":8,"column":17},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":17}},{"generated":{"line":8,"column":19},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":19}},{"generated":{"line":8,"column":20},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":17}},{"generated":{"line":8,"column":21},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":9}},{"name":"c","generated":{"line":8,"column":26},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":26}},{"generated":{"line":8,"column":28},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":28}},{"generated":{"line":8,"column":29},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":26}},{"name":"a","generated":{"line":8,"column":33},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":33}},{"generated":{"line":8,"column":35},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":35}},{"generated":{"line":8,"column":36},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":33}},{"generated":{"line":8,"column":37},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":9}},{"generated":{"line":8,"column":41},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":41}},{"name":"b","generated":{"line":8,"column":42},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":42}},{"generated":{"line":8,"column":44},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":44}},{"generated":{"line":8,"column":45},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":42}},{"name":"a","generated":{"line":8,"column":49},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":49}},{"generated":{"line":8,"column":51},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":51}},{"generated":{"line":8,"column":52},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":49}},{"generated":{"line":8,"column":53},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":41}},{"name":"c","generated":{"line":8,"column":58},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":58}},{"generated":{"line":8,"column":60},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":60}},{"generated":{"line":8,"column":61},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":58}},{"name":"a","generated":{"line":8,"column":65},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":65}},{"generated":{"line":8,"column":67},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":67}},{"generated":{"line":8,"column":68},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":65}},{"generated":{"line":8,"column":69},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":41}},{"generated":{"line":8,"column":70},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":6,"column":2}},{"generated":{"line":9,"column":0},"source":"data-viz/node_modules/d3-polygon/src/cross.js","original":{"line":7,"column":1}}],"sources":{"data-viz/node_modules/d3-polygon/src/cross.js":"// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n"},"lineCount":null}},"hash":"c7b27215a43c6fd18ecbb64eba29521d","cacheData":{"env":{}},"id":426}